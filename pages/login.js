import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Cookies from 'js-cookie';
import Link from 'next/link';
import useUserData from '@/utils/UseUserdata';
import axios from 'axios';
import { login_user, check_auth } from '@/services';

export default function Home() {
  const [formData, setFormData] = useState({ email: '', password: '' });
  const [loadingFormData, setLoadingFormData] = useState(true);
  const [error, setError] = useState(null);

  const userData = useUserData();
  const router = useRouter();

  useEffect(() => {
    const fetchData = async () => {
      try {
        if (userData && userData.user && userData.user.email) {
          setLoadingFormData(true);
          const userEmail = userData.user.email;
          const response = await axios.post("/api/Auth/formvalue/formvalue", {
            email: userEmail,
          });
          console.log(response);
          setFormData(response.data.data);
          setLoadingFormData(false);
        } else {
          throw new Error("User data not available");
        }
      } catch (error) {
        setError(error.response ? error.response.data.error : error.message);
        setLoadingFormData(false);
      }
    };

    if (userData) {
      fetchData();
    }
  }, [userData]);

  useEffect(() => {
    const checkAuthentication = async () => {
      const res = await check_auth();
      if (res.isAuthenticated) {
        router.push("/mydashboard");
      }
    };

    checkAuthentication();
  }, [router]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const res = await login_user(formData);
      console.log("form data on login", formData);
      if (res.success) {
        toast.success(res.message);
        localStorage.setItem("authToken", res.token);
        Cookies.set("token", res.token);

        setTimeout(() => {
          if (formData.userId && formData.userId.length > 0) {
            router.push("/mydashboard");
          } else {
            router.push("/mydashboard/add-details");
          }
        }, 1000);
      } else {
        toast.error(res.message);
      }
    } catch (error) {
      toast.error("Login failed. Please try again.");
      console.error("Error during login:", error);
    }
  };

  return (
    <>
      <Head>
        <title>Login System</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToastContainer />
      <div id="login" className="bg--scroll login-section division">
        <div className="container">
          <div className="row justify-content-center">
            <div className="col-lg-6">
              <div className="register-page-wrapper r-16 bg--fixed">
                <div className="row">
                  <div className="col-md-12">
                    <div className="register-page-form">
                      <div className="col-md-12 text-center">
                        <img className='logologin' src="/assets/images/logo-white.png" alt="Logo" />
                      </div>
                      <form name="signinform" className="row sign-in-form" onSubmit={handleSubmit}>
                        <div className="col-md-12">
                          <p className="p-sm input-header">Email address</p>
                          <input 
                            onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                            type="email" 
                            name="email" 
                            id="email" 
                            className="form-control email" 
                            placeholder="name@company.com" 
                            required 
                            value={formData.email} 
                          />
                        </div>
                        <div className="col-md-12">
                          <p className="p-sm input-header">Password</p>
                          <div className="wrap-input">
                            <span className="btn-show-pass ico-20"><span className="flaticon-visibility eye-pass"></span></span>
                            <input 
                              onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                              type="password" 
                              name="password" 
                              id="password" 
                              placeholder="••••••••" 
                              className="form-control password" 
                              required 
                              value={formData.password} 
                            />
                          </div>
                        </div>
                        <div className="col-md-12">
                          <div className="reset-password-link">
                            <p className="p-sm"><Link href="/reset-password"><a className="color--theme">Forgot your password?</a></Link></p>
                          </div>
                        </div>
                        <div className="col-md-12">
                          <button type="submit" className="btn btn--theme hover--theme submit">Log In</button>
                        </div>
                        <div className="col-md-12">
                          <p className="create-account text-center">
                            Don't have an account? <Link href="/register"><a className="color--theme">Sign up</a></Link>
                          </p>
                        </div>
                      </form>
                      {error && <div className="alert alert-danger mt-3">{error}</div>}
                      {loadingFormData && <div className="spinner-border text-primary mt-3" role="status">
                        <span className="sr-only">Loading...</span>
                      </div>}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
